<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue笔记</title>
      <link href="/2022/06/15/Vue%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/15/Vue%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>开启服务器：npm run serve</p><p>关闭服务器:两次ctrl+c </p><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据，传过来的数据都会存储在vc(组件实例对象)身上，可以直接通过this.name获取</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code>  直接在标签里面传递数据即可</p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p></li><li><p>且required和default不会同时限定的</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><ol><li>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</li><li>props的优先级要高于data，Vue会先读取props中的数据</li></ol></blockquote></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象，就是有多个子组件中具有相同的功能或者属性时，我们可以将这些共用的配置封装成一个mixin.js，并将其暴露，最后可以被各个组件导入并使用</p></li><li><p>使用方式：</p><p> 第一步定义混合：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;....&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第二步导入 </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;xxx,xxx&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span><br></pre></td></tr></table></figure><p> 第三步使用混入：</p><p> ​    全局混入：<code>Vue.mixin(xxx)</code> ，全局混入是在main.js中导入并使用的<br> ​    局部混入：<code>mixins:[&#39;xxx&#39;]    </code> ，局部混入是在应用到这个共用配置的子组件中导入并使用的</p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>步骤：a. 首先定义一个插件plugins.js</p><p> ​           b. 在main.js中导入import</p><p> ​           c. 在main.js中应用导入后的组件 Vue.use(plugins,参数1，参数2···)</p></li><li><p>定义插件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use(插件名,使用者传入的参数)</code></p></li></ol><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突。因为多个子组件中的样式类名可能会有相同的，那么这时加上了scoped后，该样式只在该子组件内生效</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结TodoList案例-组件间的通信"><a href="#总结TodoList案例-组件间的通信" class="headerlink" title="总结TodoList案例(组件间的通信)"></a>总结TodoList案例(组件间的通信)</h2><ol><li><p>组件化编码流程：</p><p> ​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p> ​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p> ​            1).一个组件在用：放在组件自身即可。</p><p> ​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）例子中表现为将todoList数据放在总组件App中，供下面的子组件来使用。</p><p> ​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p> ​    (1).父组件 ==&gt; 子组件 通信 (爷爷组件==&gt;子组件时，需要爷爷组件先传给父组件，再通过父组件传给子组件)</p><p> ​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数），这个函数定义在父组件中，并通过子组件标签来将这个函数传给子组件，</p><p> ​                            子组件再通过props将该函数接收，接收之后子组件的vc身上就会多出来这一个函数，直接可以利用this.func(para)调用。</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。不论是sessionStorage还是localStroage都是以key：value键值对的形式来进行数据存储的</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p> ​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p> ​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p> ​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失(1.用户自主地清空浏览器地缓存 2.用户点击了实现清空clear()的操作)。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li><li>本地存储和会话存储都不能存储对象，不过可以通过JSON.stringify()将对象先转化为字符串存储到xxxStroage中获取的时候再通过 JSON.parse()将存储的字符串再转化为对象</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:#3cb371">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:#3cb371">事件的回调函数在A中，因为这个回调函数就是用来接收子组件传过来的数据</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code> 第一种直接在标签里面绑定自定义事件 注意这里的回调函数test是不需要写参数的，他需要在methods中实现的时候才加上参数实现test(data)</p></li><li><p>第二种方式，在父组件中：第二种首先需要在目标的子组件上定义ref属性，再在本组件的mounted钩子中完成事件绑定</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>.once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,要传递的数据)</code>        要传递的数据就是在触发自定义事件的时候，以参数的形式传给对应的回调函数</p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件（例如@click），需要使用<code>.native</code>修饰符（@click.native）。否则，会默认他是一个自定义事件！</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:#3cb371">要么配置在methods中</span>，<span style="color:#3cb371">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:#3cb371">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：<span style="color:#3cb371">事件总线有两个要求：1. 需要让所有的组件都能够访问的到    2. 且身上具有$on,$emit等api</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......<span class="comment">//beforeCreate()注意在这个创建之前钩子中进行设置</span></span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">    <span class="comment">//1.因为将这个总线(傀儡)$bus放在Vue的原型对象上，那么所有的vc组件实例对象都能够通过原型链向上找到这个总线$bus</span></span><br><span class="line">    <span class="comment">//2.且这个$bus就是vm，因为这样他身上才会有$on,$off,$emit等api</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据组件<span style="color:#3cb371">(绑定事件)</span>：A组件想接收数据，则在A组件中给$bus绑定自定义事件<span style="color:#3cb371">(在mounted钩子中进行绑定，一挂载就绑定)</span>，事件的<span style="color:#3cb371">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据组件<span style="color:#3cb371">(触发事件)</span>：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code> <span style="color:#3cb371">提供数据的组件，需要在本组件方法内$emit触发事件总线中绑定的事件，并通过参数来传送数据</span></p></li></ol></li><li><p>接收数据的组件最好在beforeDestroy钩子中，用this.$bus.$off去解绑<span style="color:#3cb371">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>  一种组件间通信的方式，适用于<span style="color:#3cb371">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code> 用到pubsub的vue组件都需要引入</p></li><li><p>接收数据<span style="color:#3cb371">(订阅消息)</span>：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:#3cb371">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//一定要注意订阅消息时，后面的回调函数中第一个参数是固定的msgName为本次消息名，这里用_来占位，后面的data才是真正的获取的数据</span></span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">_,data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="comment">//消息的订阅也是在组件挂载完毕的钩子中完成的</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;消息名&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line"><span class="comment">//注意订阅消息后，会返回一个订阅id，这个id是用来找到这个消息，并取消订阅</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据<span style="color:#3cb371">(发布消息)</span>：<code>pubsub.publish(&#39;消息名&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>pubsub.unsubscribe(this.pid)</code>去<span style="color:#3cb371">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。在对原dom做出修改后，Vue重新解析模板后生成的新dom，这时我们对这个新dom进行一些操作时，需要通过$nextTick(function{})中的回调来实现</li><li>什么时候用：当改变数据后<span style="color:#3cb371">(例如修改了data中的值)</span>&gt;，要基于更新后的新DOM进行某些操作时<span style="color:#3cb371">(例如修改后，会有一个input框的生成，我们想要在input框生成后就立即获取焦点focus())</span>&gt;，这时要在nextTick所指定的回调函数中执行(完成获取焦点的操作)。</li></ol><h2 id="Vue封装的过渡与动画"><a href="#Vue封装的过渡与动画" class="headerlink" title="Vue封装的过渡与动画"></a>Vue封装的过渡与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>动画可以引入第三方的动画库(animate.css) 添加指定的name，appear-active-class，leave-active-class即可完成动画效果</p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过渡的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过渡，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><p>以下都通过axios来发送ajax请求：1.首先先安装axios包： npm i axios</p><p>​                                                       2.导入axios：import axios from ‘axios’</p><p>实现跨域：1.cors <span style="color:#3cb371">真正解决了跨域问题</span></p><p>​                 2.jsonp <span style="color:#3cb371">jsonp实现跨域的本质是通过script标签的src属性在引入外部资源时，不受到同源限制的特点来实现的，但是只能解决get请求，要求前后端配合写法</span></p><p>​                 3.利用代理服务器<span style="color:#3cb371">（开启代理服务器的两种方式：1.通过Nginx     2.通过vue-cli脚手架）</span></p><p>文件中的两个服务器开启方式：文件中打开cmd，命令node server1/server2   </p><p>关闭服务器：ctrl+c</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （如果前端有这个资源，也就是根目录public下有的资源，那么就优先匹配前端资源，不会再去转发给目标服务器了）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径，也就是只写到端口号即可，不用写到具体的资源路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;<span class="comment">// pathRewrite路径重写，里面是一个key:value键值对形式</span></span><br><span class="line">          <span class="comment">//   ^/api1表示把所有的以api1开头的路径，把这段路径修改为空，即没有了/api1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时(代理服务器撒谎了，说自己的host与代理服务器的目标服务器相同都为localhost:5000)，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时(代理服务器如实回答)，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:#3cb371">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">&lt;!--- 当我使用了template时，指定插槽也可以用下面的方式v-slot:footer--&gt;</span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:#3cb371">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在子组件Category中，但使用数据所遍历出来的结构由父组件App决定）</p></li><li><p>作用域插槽必须通过template标签进行包裹</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">            &lt;!--- 这里可以利用对象的解构赋值，这样就直接可以使用games获取到scopeData.games的属性值--&gt;</span><br><span class="line">            &lt;!--- scope=&quot;&#123;games&#125;&quot;--&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​        多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作，相当于服务员</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据，相当于厨师</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据，相当于最后的菜品</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//引入插件</span></span><br><span class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">//使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(vueResource)</span><br><span class="line"><span class="comment">//1.引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="comment">//注意一定要在vm里面定义使用</span></span><br><span class="line">store,<span class="comment">//2.定义store，这样vm以及所有的vc身上都会有$store了，都可以通过this.$store来调用</span></span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex,因为vuex本身是一个插件plguins，所以导入后需要通过Vue.use()使用</span></span><br><span class="line"><span class="comment">//因为只有先使用Vue.use(Vuex)，才能去创建new Vuex.Store()</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//actions是用来接收vc通过this.$dispatch(&#x27;操作名add&#x27;,参数)，这时里面操作名add需要在actions中配置</span></span><br><span class="line"><span class="comment">//并接收参数value</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//🌈context为上下文，其中有commit(),dispatch(),state....等方法和属性</span></span><br><span class="line">    <span class="comment">//context.commit()用来将接收到的数据进一步呈递给mutations处理</span></span><br><span class="line">    <span class="comment">//context.dispatch()当业务逻辑很复杂时，在一个操作函数中并不能完成逻辑，那么就需要context.dispatch(&#x27;demo&#x27;,value)进一步分发给</span></span><br><span class="line">    <span class="comment">//同在actions中的其他方法demo()，demo会对进一步完成逻辑操作，使最终满足业务逻辑要求</span></span><br><span class="line">    <span class="comment">//context中具有state属性，所以它可以直接访问到里面的状态(数据)sum</span></span><br><span class="line">    <span class="comment">//🌟当数据需要进行一些逻辑操作时，就需要放在actions执行</span></span><br><span class="line">    <span class="title function_">addWhenOdd</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>, value)<span class="comment">//commit传给mutations时的方法名一般要全大写ADD</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addWait</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>, value)</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mutations是用来处理数据的，数据通过actions中的对应操作的函数调用commit方法来传递给mutaiton</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的+被调用了&#x27;</span>);</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">SUBTRACT</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的-被调用了&#x27;</span>);</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//所共享的数据都会放在state中</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="comment">//这因为key:value值相同，所以都使用简写形式</span></span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> <span style="color:#3cb371">备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></span></p></blockquote></li></ol><p><img src="C:\Users\24825\Desktop\Vue资料\02_原理图\vuex.png"></p><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。<span style="color:#3cb371">它其实可以理解为Vuex中的计算属性computed,对于state中的数据进一步加工，最后通过return返回加工后的值。</span></p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span><span class="comment">//需要return返回处理后的值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><blockquote><p>备注：mapState, mapGetters这两个是帮我们生成一个计算属性的（配置在computed中）</p><p>​     mapMutations, mapActions这两个是帮我们生成一个方法的（配置在methods中）</p></blockquote><p>首先需要在组件中导入mapState, mapGetters, mapMutations, mapActions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState, mapGetters, mapMutations, mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为<span style="color:#3cb371">计算属性</span>,mapXxx就是从Xxx取东西</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">    <span class="comment">//...&#123;&#125;可以将一个对象中的key:value分解出来，形成单独的key:value</span></span><br><span class="line">    <span class="comment">//前面的sum表示的计算属性的函数名（本身对象的key可以简写不用加引号），后面的&#x27;sum&#x27;表示要从state中读取名为sum这个属性值</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    <span class="comment">//写成数组时[&#x27;sum&#x27;]，这时&#x27;sum&#x27;有两种用途，也就是计算属性名和读取数据名要相同！！</span></span><br><span class="line">         <span class="comment">//1. 将sum作为计算属性sum()&#123;&#125;</span></span><br><span class="line">         <span class="comment">//2. 从state中读取名为&#x27;sum&#x27;的属性值</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    <span class="comment">//其中increment就会作为methods中的方法名,形成一个increment(vlaue)&#123;方法内部就会调用commit去联系mutations&#125;的方法，&#x27;JIA&#x27;是会去mutations中找名为JIA的函数并执行它</span></span><br><span class="line">    <span class="comment">//这样的话就不需要我们通过$store.commit(&#x27;JIA&#x27;，value)来去和mutations进行对话了</span></span><br><span class="line">    <span class="comment">//注意这里无法传入increment方法所需的参数，所以需要在模板中绑定事件触发该increment方法时就传入参数value</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code> 在main.js中应用路由插件VueRouter，并在vm中配置路由器属性router</p></li><li><p>编写router路由器配置项: 路由器会独立写在一个目录为router下的index.js文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    <span class="comment">//一级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">     <span class="comment">//二级路由 </span></span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children[]配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//🌈此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><span style="color:#3cb371">跳转（要写完整路径）：</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><p>因为组件的this.$route.query上包含着传过来的query参数信息</p><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">当使用to的字符串写法时，如果传递的参数时动态获取的，这时需要通过模板字符串``和$&#123;&#125;进行操作，但注意to要加冒号绑定，且要有&quot;`$&#123;&#125;`&quot;包裹</span><br><span class="line">&lt;router-link :to=&quot;`/home/message/detail?id=$&#123;js语句&#125;&amp;title=$&#123;js语句&#125;`&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。<span style="color:#3cb371">但注意一定是当路径复杂，也就是到了三级四级之后的子路由，可以通过name来直接跳转</span></p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：<span style="color:#3cb371">通过name跳转时，:to=”{name:xxx}”一定要加:绑定，且name写在对象中</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的params参数（需要占位）"><a href="#6-路由的params参数（需要占位）" class="headerlink" title="6.路由的params参数（需要占位）"></a>6.路由的params参数（需要占位）</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//🌈使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line"> &lt;router-link :to=&quot;&#123;</span><br><span class="line">          name:&#x27;xiangqing&#x27;,</span><br><span class="line">          params:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">          &#125;</span><br><span class="line">          &#125;&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项 path:’/home/message/detail’，必须使用name配置 name:’xiangqing’！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>​    作用：让路由组件更方便的收到参数</p><blockquote><p><span style="color:#3cb371">注意以下的三种写法，他们都是通过pros给Detail组件传递参数，所以一定要在Detail组件中用props[‘xx’]接收</span></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">    <span class="comment">//第二种仅仅只能将params参数通过prpos传递</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">            <span class="comment">//第三种写法也可以传递其他类型的数据，同样需要在Detail组件中props接收</span></span><br><span class="line">            <span class="attr">a</span>: <span class="number">123</span>,</span><br><span class="line">            <span class="attr">b</span>: <span class="string">&#x27;我是b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//第三种中利用解构赋值简化写法，解构出$route对象中的&#123;query&#125;</span></span><br><span class="line">    <span class="title function_">props</span>(<span class="params">&#123;query&#125;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:query.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:query.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//第三种中利用解构赋值的嵌套写法，再次简化写法，继续解构处query对象中的id和title &#123;query:&#123;id,title&#125;&#125;</span></span><br><span class="line">    <span class="title function_">props</span>(<span class="params">&#123;query:&#123;id,title&#125;&#125;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">id,<span class="comment">//简写形式</span></span><br><span class="line">title</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式，可以通过浏览的前进和后退指针进行跳转</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>（它就相当于入栈，点击一次router-link，就会把当前的跳转的路径压入栈中）和<code>replace</code>（它相当于入栈的时候把栈顶元素替换掉，就是把当前栈顶的路径替换为本次跳转的路径），<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进go(3)前进3步 也可后退go(-3)后退三步</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。<span style="color:#3cb371">（一般想要保留数据的组件）</span></p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;!-- 一定是包在&lt;router-view&gt;标签的外部 --&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><span style="color:#3cb371">1. 上述中指定include=”xxx” 这个名字是组件的名字，也就是vc中的name属性配置</span></p><p><span style="color:#3cb371">2. 也可以不指定include，这时展示在router-view中的组件都会保持挂载，不会销毁</span></p><ol start="3"><li>如果需要在多个组件中挑选出其中的几个组件来使其保持挂载，那么可以用冒号绑定还有数组包裹<span style="color:#3cb371"> :include=”[‘组件名1’,’组件名2’]”</span></li></ol></blockquote><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li><li>小结生命钩子：beforeCreate(),creared(),beforeMount(),mounted(),beforeUpdate(),updated(),beforeDestory(),destoryed(),<span style="color:#3cb371">activated(),deactivated(),$nextTick()</span></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><ol><li>全局前置守卫和后置守卫，两个函数都有to,from参数，to{name:”xxx”,path:”/xxx”,meta:{}}表示的目的路径信息 <span style="color:#3cb371">(这个组件的路由信息其实和目的组件中的$route信息相同)，</span>from{}表示的是起点路径信息</li><li>前置守卫的next参数表明 是否放行该路径,只有next()放行了才会真正到达目的组件<span style="color:#3cb371">（注意如果没有放行该路由，也就是没有到达目的to组件，这时全局后置路由是不会执行的！只有全局前置路由执行！）</span></li><li>to.meta{}，meta对象中是包含的是路由的元信息，也就是coder自己定义的一些数据 </li><li>对于全局守卫而言，他是router身上的函数，所以需要在index.js接收这个路由器router,而不是直接将路由器暴露</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="comment">//这里需要在路由器的routes的配置中，对需要判断是否要有权限的路由，给他的meta自定义一组key:value </span></span><br><span class="line">    <span class="comment">//meta:&#123;isAuth:true&#125;</span></span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line"><span class="comment">//⭐注意如果前置路由中没有放行，那么这里的后置路由也不会执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫: 他写在该组件的路由配置中 <span style="color:#3cb371">独享只有前置守卫！他可以和全局后置守卫搭配使用</span></p><p>beforeEnter(){}他是一个函数，不像全局守卫类似定时器回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 组件内守卫：</p></li><li><p>组件内守卫首先是组件独有的，进入守卫和离开守卫都是定义在组件的vc中</p></li><li><p>两个守卫都是需要通过路由规则，也就是需要经过路由器指定匹配的路径的组件</p></li><li><p>两个守卫都有next参数，进入和离开都需要设置是否放行next()</p></li><li><p>进入守卫的to和离开守卫的from对应的路由信息都是本次组件的路由信息</p></li><li><p>当进入守卫中没有放行next()该路由时，那么页面是进入不到该路径里的！</p></li><li><p>同样的，它也可以和全局后置守卫搭配使用</p></li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件之前被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用，注意他和全局后置守卫的区别，离开守卫是当离开了该组件时(路由已经切换完了)，他才会调用</span></span><br><span class="line"><span class="comment">//而全局后置守卫是只要我本次路由切换完毕我就会调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li><li>在路由器router配置中加上 mode:’history’ 就可以把路由器的工作模式转换为history模式，默认是hash模式</li><li>项目的最终打包：npm run build 该命令会把vue文件都转换成为静态的前端代码html+css+js</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试笔记</title>
      <link href="/2022/06/15/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/15/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>用语义化标签就会标记出每个区域的作用并且更好是实现页面布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span>  头部</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span>  导航栏</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span>  区块（有语义化的div）</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span>  主要区域</span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span>  主要内容</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span>  侧边栏</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  底部</span><br></pre></td></tr></table></figure></li><li><p>HTML5有哪些更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）新增语义化标签：nav、header、footer、aside、section、article</span><br><span class="line">（2）音频、视频标签：audio、video</span><br><span class="line">（3）数据存储：localStorage、sessionStorage</span><br><span class="line">（4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议）</span><br><span class="line">（5）input标签新增属性：placeholder、autocomplete、autofocus、required</span><br><span class="line">（6）history API：go、forward、back、pushstate</span><br></pre></td></tr></table></figure><p>1.语义化标签，使⽤语义类标签增强了可读性，开发者也能够清晰地看出⽹⻚的结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">● header：定义文档的页眉（头部）；</span><br><span class="line">● nav：定义导航链接的部分；</span><br><span class="line">● footer：定义文档或节的页脚（底部）；</span><br><span class="line">● article：定义文章内容；</span><br><span class="line">● section：定义文档中的节（section、区段）；</span><br><span class="line">● aside：定义其所处内容之外的内容（侧边）；</span><br></pre></td></tr></table></figure><p>2.媒体标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">audio：音频</span><br><span class="line">video视频</span><br><span class="line">source标签</span><br></pre></td></tr></table></figure><p>3.表单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">表单类型</span><br><span class="line">- email ：能够验证当前输入的邮箱地址是否合法</span><br><span class="line">- url ： 验证URL</span><br><span class="line">- number ： 只能输入数字，其他输入不了</span><br><span class="line">表单属性：</span><br><span class="line"> placeholder ：提示信息</span><br><span class="line">表单事件：</span><br><span class="line">oninput 每当input里的输入框内容发生变化都会触发此事件。</span><br><span class="line">oninvalid 当验证不通过时触发此事件。</span><br></pre></td></tr></table></figure><p>4.进度条</p><p>progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少</p><p>5.DOM查询操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- document.querySelector()</span><br><span class="line">- document.querySelectorAll()</span><br><span class="line">它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)</span><br></pre></td></tr></table></figure><p>6.Web存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTML5 提供了两种在客户端存储数据的新方法：</span><br><span class="line">- localStorage - 没有时间限制的数据存储</span><br><span class="line">- sessionStorage - 针对一个 session 的数据存储</span><br></pre></td></tr></table></figure></li><li><p>Css选择器的优先级</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">css是通过计算这些选择器的权重来去判定他们优先级的高低</span><br><span class="line">首先用!important的权重最高，之后是内联样式权重为1000，其次是id选择器权重为100，之后是类选择器，伪类选择器，属性选择器的权重都为10，标签选择是1，其余的一些子选择器，后代选择器为0</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>盒子模型的属性</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width、height、margin、border、padding</span><br></pre></td></tr></table></figure><ol start="5"><li>对盒模型的理解</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标准盒子模型、IE盒子模型</span><br><span class="line">盒模型都是由四个部分组成的，分别是margin、border、padding和content。</span><br><span class="line">标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：</span><br><span class="line">● 标准盒模型的width和height属性的范围只包含了content，</span><br><span class="line">● IE盒模型的width和height属性的范围包含了border、padding和content。</span><br><span class="line">可以通过修改元素的box-sizing属性来改变元素的盒模型：</span><br><span class="line">● box-sizing: content-box表示标准盒模型（默认值）</span><br><span class="line">● box-sizing: border-box表示IE盒模型（怪异盒模型）</span><br></pre></td></tr></table></figure><p>6.CSS3中有哪些新特性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">● 新增各种CSS选择器,child来匹配父元素的相应的子元素</span><br><span class="line">● 圆角 （border-radius:8px）</span><br><span class="line">●css弹性盒子模型</span><br><span class="line">● 增加过渡，动画</span><br></pre></td></tr></table></figure><p>7.两栏布局的实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先3大类：flex弹性布局，绝对定位，浮动</span><br><span class="line">1.将左右盒子的父盒子display设定为flex，之后将左盒子设定宽度w，右盒子的flex：1(1,1,0%) flex-grow，flex-shrink，flex-basis 使其等比缩放</span><br><span class="line">2. 父盒子相对定位，左盒子绝对定位并指定宽度，右盒子margin-left值为左盒子宽度值</span><br><span class="line">                右盒子绝对定位，将右盒子左方向值设定为左盒子的宽度值</span><br><span class="line">3. 左盒子进行左浮动并设定宽度值，右盒子的margin-left值为左盒子的宽度，右盒子的宽度为auto</span><br><span class="line">   左盒子进行左浮动并设定负定宽高，右盒子的overflo：hidden</span><br></pre></td></tr></table></figure><p>8.三栏布局的实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有三种形式，flex弹性布局，绝对定位，浮动</span><br><span class="line">1.将三栏的父盒子的display谁当为flex，左右两栏设定固定的宽度，之后中间栏的flex:1</span><br><span class="line">2.将三栏的父盒子相对定位，左右盒子绝对定位，分别居于左右两侧，中间栏设定margin-left和margin-right分别为左右两栏的宽度值</span><br><span class="line">3.将左右盒子分别作左右浮动，中间栏设定margin-left和margin-right分别为左右两栏的宽度值</span><br></pre></td></tr></table></figure><p>9.水平垂直居中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我可能知道的不全面，目前我知道有两种方式，flex弹性布局和绝对定位</span><br><span class="line">1.将父盒子dispaly设定为flex，设定水平轴justify-content:center 还有垂直轴align-items:center</span><br><span class="line">2.将父盒子相对定位，子盒子绝对定位，将左上方向50%移动至页面中央，最后通过translate或者margin的负值来调整元素中心值至页面中央 </span><br><span class="line">3.自盒子绝对定位之后，所有方向都为0，最后margin为auto</span><br></pre></td></tr></table></figure><p>10.==操作符的强制类型转化规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.==首先会看两者的数据类型是否一致</span><br><span class="line">2.如果不一致的会进行强制转换，首先看是否是null == undefine ,是则返回true</span><br><span class="line">3.再看是否是string == number ，将string强转为number型在进行对比</span><br><span class="line">4.再看是否是boolean == number， 将boolean继续转为number</span><br><span class="line">5.最后如果是一个对象 == 非对象string，则会将该对象通过toPrimitive转为基本数据类型在进行对比</span><br><span class="line">注意如果是两个对象比较，则是比较的是地址空间，因为对象数组这些引用类型都是存储在堆中的，分配相应的引用地址</span><br></pre></td></tr></table></figure><ol start="11"><li>js的8大数据类型</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u are so nb  </span><br><span class="line">undefined </span><br><span class="line">symbol string </span><br><span class="line">object </span><br><span class="line">number null </span><br><span class="line">boolean bigint</span><br></pre></td></tr></table></figure><p>12.如何判断一个对象是一个空对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.通过Object.keys()获取这个对象的索引数组，如果索引数组长度为0，则表明对象是空对象</span><br><span class="line">2.通过for in 遍历这个对象，如果这个对象不可遍历 则为空对象</span><br><span class="line">3.通过Json.stringfy()将对象转为字符串，并于 ==&#x27;&#123;&#125;&#x27;比较</span><br></pre></td></tr></table></figure><p>13.es6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.增加了let，const关键字</span><br><span class="line">    1.有了块级作用域的特点（变量的覆盖，变量泄露）</span><br><span class="line">    2.没有变量提升，必须声明后才能使用</span><br><span class="line">    3.var 用来声明全局变量 </span><br><span class="line">    4.var，let都可以改变其指针指向，但const无法修改它的指针指向且必须赋初始值</span><br><span class="line">    5.var可以重复声明，但let和const不允许重复声明</span><br><span class="line">2.箭头函数</span><br><span class="line">3.扩展运算符... 用户合并数组或者合并对象</span><br><span class="line">4.rest参数...args  可以是用来接收剩余不确定个数的参数，将其存放在一个数组中</span><br><span class="line">5.模板字符串</span><br><span class="line">6.数组或对象的解构赋值</span><br><span class="line">7.模块化 可以避免命名冲突，提高代码复用，利于维护</span><br><span class="line">8.for of 遍历 (</span><br><span class="line">1.for of遍历的是键值，for in 遍历的键名</span><br><span class="line">2.for of只会遍历当前对象</span><br><span class="line">3.for in适合遍历对象，for of适合遍历数组（因为of必须要求需要有迭代器，所以他不能迭代对象）。for in遍历的是数组的索引，对象的属性，以及原型链上的属性。</span><br><span class="line">)</span><br><span class="line">9.async 和 await ，async返回一个Promise期约对象，常用于一个ajax请求，异步等待请求的结果，并对请求结果返回的Promise进行一些处理</span><br><span class="line">10.Promise期约（fulfilled，rejected，Pending（进行中））</span><br></pre></td></tr></table></figure><p>14.箭头函数this的指向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 首先箭头函数没有自己的this，箭头函数定义的位置的外部最近的一个this就是他的this</span><br><span class="line">2. 对于普通函数来说他的this指向的是调用者，谁调用就指向谁，可以是window，可以是对象，只看是谁调用，不看他定义在哪个位置</span><br><span class="line">3. 切记箭头函数如果定义在一个对象里面，那么他应该还需要再去外层找，因为对象的&#123;&#125;不是一个作用域</span><br></pre></td></tr></table></figure><p>15.axios</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios是通过Promise实现对ajax技术的一种封装</span><br><span class="line">    1. 浏览器端发起XMLHttpRequests请求</span><br><span class="line">    2. 支持Promise API</span><br><span class="line">    3. 监听请求和返回</span><br><span class="line">    4. 自动转换json数据</span><br><span class="line">    5. 支持拦截请求和响应</span><br></pre></td></tr></table></figure><p>16.ajax</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ajax的全称是async javascript xml 异步的js和xml</span><br><span class="line">1、什么是ajax</span><br><span class="line">Ajax是对原生XHR的封装，发送一个异步请求，不用刷新网页</span><br><span class="line">2、ajax的原理？</span><br><span class="line">客户端通过ajax向服务器发起请求，服务器作出响应之后返回给客户端，客户端接收到数据后，实现页面无刷新更新数据</span><br><span class="line">3. ajax请求的五个步骤</span><br><span class="line">    1. 创建XMLHttpRequest异步对象xml</span><br><span class="line">    2. open初始化 设置请求方法和 url，请求参数</span><br><span class="line">    3. send发送数据</span><br><span class="line">    4. 绑定事件回调，处理服务端返回的结果</span><br><span class="line">    5. 在回调函数中针对不同的响应状态进行处理（首先会判断xml状态为4，之后再判断返回的相应状态码200-300）</span><br><span class="line">4.他的缺点：</span><br><span class="line">1.安全问题 ajax暴露了与服务器交互的细节</span><br><span class="line">2.ajax不能很好的支持移动设备</span><br><span class="line">3.ajax不能使用Back和history功能，即对浏览器机制的破坏。</span><br></pre></td></tr></table></figure><p>17.跨域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.什么跨域？当违背了ajax的同源策略即为跨域</span><br><span class="line">请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域,其实这是浏览器的一种同源策略(Same origin policy)，为了减小网络攻击</span><br><span class="line">2.解决跨域的方法：</span><br><span class="line">    前端解决：3种</span><br><span class="line">        1.jsonp jsonp实现跨域的本质是通过script标签的src属性在引入外部资源时，不受到同源限制的特点来实现的，但是只能解决get请求，要求前后端配合写法</span><br><span class="line">        2.利用代理服务器---WebPack-proxy会启动一个本地开发的服务器，即跨域所使用的代理服务器，代理服务器会响应本地请求，继而转发到目标服务器，目标服务器响应数据后再将数据返回给代理服务器，代理服务器再将数据返回给本地。</span><br><span class="line">        在此阶段中不涉及任何跨域问题，因为代理服务器跟本地同源，而服务器之间不存在跨域问题，跨域问题是浏览器安全策略限制</span><br><span class="line">        3.Nginx反向代理，但这个我目前还不是很了解，只是知道有这种方法</span><br><span class="line">    后端解决：</span><br><span class="line">        cros： cors 真正解决了跨域问题，只需要在服务端设置响应头允许跨域即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>18.对原型的理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaScript使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法</span><br></pre></td></tr></table></figure><p>19.原型链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个构造函数都有一个prototype的原型对象，通过构造函数得到的实例化对象具有__proto__属性并指向该构造函数的原型对象，而原型对象上的constructor又指向对应的构造函数，对于该构造函数的原型对象也可以理解为时Object的实例化对象，他的__proto__指向的是Object构造函数的原型对象，而object的原型对象的__proto__指向原型链的终点null</span><br></pre></td></tr></table></figure><p>20.闭包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">闭包就是一个作用域引用了另一个作用域的变量或者方法，因为存在引用，所以被引用变量所在的作用域就不会被垃圾回收机制，因此就形成了闭包。</span><br><span class="line">作用：</span><br><span class="line"> 1. 可以延申变量的作用域范围</span><br><span class="line"> 2. 用于保存数据，因为闭包中变量被引用，所以不会被垃圾回收机制回收</span><br></pre></td></tr></table></figure><p>21.异步编程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">avaScript中的异步机制可以分为以下几种：</span><br><span class="line">● 回调函数 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。</span><br><span class="line">● Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。</span><br><span class="line">● async await</span><br></pre></td></tr></table></figure><p>22.垃圾回收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.什么是垃圾回收：js代码运行中，系统需要分配内存空间给这些变量和值，当他们不在被使用的时候，系统就需要释放掉他们之前占用的内存空间</span><br><span class="line">2.垃圾回收的机制：js具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存</span><br><span class="line">3.垃圾回收的方式(两种)</span><br><span class="line">1.标记清除：当变量在被使用时，会被浏览器标记为’进入环境‘，当变量不再被使用时，会被重新标记为’离开环境‘，标记为离开环境的变量会被内存释放</span><br><span class="line">2.引用计数：变量每被引用一次时，引用次数会加1，当该变量的引用次数为0时，这时该变量会被内存释放</span><br><span class="line">4.内存泄漏</span><br></pre></td></tr></table></figure><p>23.内存泄漏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">内存泄漏：就是一个变量该让他释放内存空间的时候没有被释放，始终占用着内存</span><br><span class="line">什么情况下会发生内存泄漏：</span><br><span class="line">1.不合理的使用闭包，因为在闭包中会发生内部函数对外部变量的引用，该变量会因为这个引用的存在而不会被垃圾回收机制清除</span><br><span class="line">2.遗忘的定时器，对于设定的某个循环定时器但是忘记取消他，该定时器若是有对外部变量的引用时，这时该变量所占用的内存也不会被回收</span><br><span class="line">3. 意外的全局变量，使用了未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</span><br><span class="line">4.脱离 DOM 的引用：获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收</span><br></pre></td></tr></table></figure><p>24.Vue中的双向绑定原理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Observer实现对MVVM自身model数据劫持（底层是通过Object.defineProperty()为对data里的数据进行递归的添加getter和setter），监听数据的属性变更，并在变动时进行notify</span><br><span class="line">2. Compile实现指令解析，初始化视图，并订阅数据变化，绑定好更新函数</span><br><span class="line">3. Watcher（订阅者）一方面接收Observer通过dep(消息订阅器)传递过来的数据变化，一方面通知Compile进行view update</span><br><span class="line">MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果</span><br></pre></td></tr></table></figure><p>25.MVVM、MVC、MVP的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化开发效率。</span><br><span class="line">1. MVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Controller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。(注意在MVC中 model和view是耦合的，可以相互直接通信)</span><br><span class="line">2. MVVM 分为 Model、View、ViewModel：</span><br><span class="line">1.Model代表数据模型，数据和业务逻辑都在Model层中定义；</span><br><span class="line">2.View代表UI视图，负责数据的展示；</span><br><span class="line">3.ViewModel负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作；</span><br><span class="line">Model和View并无直接关联，而是通过ViewModel来进行联系的，Model和ViewModel之间有着双向数据绑定的联系。因此当Model中的数据改变时会触发View层的刷新，View中由于用户交互操作而改变的数据也会在Model中同步。这种模式实现了 Model和View的数据自动同步，因此开发者只需要专注于数据的维护操作即可，而不需要自己操作DOM</span><br><span class="line">3.MVP View和Model之间不能直接进行交互，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部</span><br></pre></td></tr></table></figure><p>26.computed和watch的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed:</span><br><span class="line">1. 他是基于响应式依赖(data和props里面的数据)进行缓存的，当依赖的数据发生变化时，下一次获取 computed 的值时才会重新计算 computed 的值</span><br><span class="line">2. 不支持异步操作，当computed中有异步操作时，无法监听到数据的变化</span><br><span class="line">watch：</span><br><span class="line">1. 不支持缓存，只要监听的数据(data和props里面的数)发生变化，就会执行对应的handler回调</span><br><span class="line">2. 支持异步监听</span><br><span class="line">两者的应用场景：</span><br><span class="line">1.computed：当想要获取的数据是依赖于其他数据计算出来的，这时候可以利用computed的缓存特点(只要他依赖的数据没变，那么这个数据他就不会变化直接从缓存取出来即可)，可以不用每次获取这个数据时就重新计算一次了</span><br><span class="line">2.watch：当想要对某个数据变化时进行实时监听并进行一些异步操作(例如API请求)，这时就需要通过watch进行操作</span><br></pre></td></tr></table></figure><p>27.computed和methods</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">computed：他是基于响应式依赖进行缓存的，就是说只有当所依赖的数据发生变化的时候，才会重新计算新的computed值</span><br><span class="line">methods：只要调用了就会执行该函数</span><br></pre></td></tr></table></figure><p>28.v-if和v-show的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.方法：v-if是动态的给dom树添加或删除dom元素，v-show是将样式display设置为none</span><br><span class="line">2.原理：v-if在生成虚拟dom的时候会忽略掉这个虚拟节点vnode，之后再render渲染真实dom的时候也就没有了该节点</span><br><span class="line">       v-show生成虚拟dom的时候会生成这个虚拟节点，render渲染成真实dom，并将该节点的样式display设置为none</span><br><span class="line">3.特点：v-if如果初始条件为flase时，是不会被编译（加快页面加载速度），只有变为true时才会被编译</span><br><span class="line">       v-show无论初始条件为true还是false，都会被编译，并生成真实的dom元素</span><br><span class="line">4.使用场景：v-if适用于低频的的切换，v-show适合高频的显示隐藏切换</span><br></pre></td></tr></table></figure><p>29.v-model的原理，语法糖的本质是什么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-model是对表单或者组件的一种双向绑定的语法糖，本质是v-bind和v-on的语法糖</span><br><span class="line">● v-bind绑定响应数据</span><br><span class="line">● 触发事件并传递数据</span><br><span class="line">其中v-bind是对model层对view层的单向绑定，加上了v-on(进行一些函数操作，通过event.target.value获取当前触发事件的元素值)后又实现了view层对model的单向绑定，两者结合实现了model与view的双向绑定</span><br></pre></td></tr></table></figure><p>30.单页面应用和多页面应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">● SPA单页面应用（SinglePage Web Application），指只有一个主页面的应用，一开始只需要加载一次js、css等相关资源。所有内容都包含在主页面，对每一个功能模块组件化。单页应用路由跳转，只是切换到相关的组件，仅仅刷新局部资源。</span><br><span class="line">● MPA多页面应用 （MultiPage Application），指有多个独立页面的应用，每个页面必须重复加载js、css等相关资源。多页应用跳转，需要整页资源刷新。</span><br><span class="line">SPA的优点：</span><br><span class="line">1. 页面相应速度块，用户体验优，因为不需要一直跳转网页</span><br><span class="line">2. 因为不需要重复加载资源，所以spa可以减小服务器的压力</span><br><span class="line">3. 前后端分离，架构清晰，前端进行交互逻辑，后端股则负责数据处理</span><br><span class="line">缺点：</span><br><span class="line">1. 初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载</span><br></pre></td></tr></table></figure><ol start="31"><li>v-if和v-for哪一个优先级更高？如果同时出现，需要怎么做？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对于vue2来说v-for的优先级会更高，总是会优先执行循环再去判断，尽量使不要同时出现，会浪费性能，因为循环不可避免，所以每次都要进行if判断</span><br><span class="line">解决方式是在外面嵌套一层v-if，里面使用v-for</span><br></pre></td></tr></table></figure><p>32.前端性能优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 路由和图片的懒加载</span><br><span class="line">2. v-for和v-if避免同时使用</span><br><span class="line">3. 第三方插件按需引入</span><br><span class="line">4.keep-alive缓存页面</span><br></pre></td></tr></table></figure><p>33.Vue生命周期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">每一个组件都需要经过创建，初始化，挂载，更新，销毁这些声明周期</span><br><span class="line">1.beforeCreate()</span><br><span class="line">初始化事件和生命周期函数,数据代理还未开始，此时无法访问data，computed，watch，methods</span><br><span class="line">2.created()</span><br><span class="line">vue实例vm创建完成，vm上的配置：data，computed，watch，methods已经配置完成，可以访问得到</span><br><span class="line">3.beforeMount()</span><br><span class="line">在挂载之前调用，相关的render函数首次被调用，解析模板生成虚拟dom，但此时还未挂载到真实页面上</span><br><span class="line">4.mounted()</span><br><span class="line">将内存中的虚拟dom转为真实dom并挂载到真实页面中，此时可以进行一些异步请求(网上有很多说在created中，但我在实际项目中，还是在mounted钩子中异步请求)，开启定时器，绑定自定义事件等等</span><br><span class="line">5.beforeUpdated()</span><br><span class="line">响应式数据更新时调用，这时数据已经更新了，但是真实dom还未被渲染，此时页面和数据尚未同步</span><br><span class="line">6.updated()</span><br><span class="line">新旧的虚拟dom进行对比，进行页面更新，此时页面和数据已经同步</span><br><span class="line">7.beforeDestroy()</span><br><span class="line">实例vm销毁之前调用，这时vm仍然可用，this仍可以获取到实例，在此阶段一般关闭定时器，解绑自定义事件等等</span><br><span class="line">8.destroyed()</span><br><span class="line">实例销毁后调用，解绑指令和移除事件监听，子实例也会被销毁</span><br></pre></td></tr></table></figure><p>34.keep-alive中的生命周期有哪些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keep-alive用来缓存组件，在组件切换的时候将状态保留在缓存中，防止重复渲染dom</span><br><span class="line">如果为一个组件包裹keep-alive，那么他就会多出两个生命周期函数：deactivated，activated同时beforeDestroy和destroyed两个钩子也不会执行了，因为组件不会被销毁</span><br><span class="line">当组件被换掉时，他会保留在缓存中并触发deactivated钩子，当组件被切回来时，再去缓存中找到该组件，并触发activated钩子</span><br></pre></td></tr></table></figure><p>35.组件间通信</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.父给子传递数据：利用pros</span><br><span class="line">子组件通过pros属性来接收父组件传递过来的数据</span><br><span class="line">2.子给父传递数据：利用自定义事件</span><br><span class="line">$on/$emit，其中在父组件中绑定自定义事件@name=&#x27;callback&#x27;，并定义相应的回调函数用来接收子组件传递的数据(若是父组件直接在标签内就绑定了，就不用再通过$on去绑定了),子组件就需要通过$emit(&#x27;name&#x27;,params)，来触发相应的自定义事件name，并将所要传递的数据params通过参数传递</span><br><span class="line">3.任意组件之间传递(也可兄弟组件)：全局事件总线$bus,在vue实例身上安装$bus，这样所有的组件实例对象都可以通过原型链向上找到这个$bus</span><br><span class="line">接收数据的组件需要绑定事件，在自身的组件中的$bus.$on去绑定事件</span><br><span class="line">提供数据的组件需要触发事件，在自身的组件中的$bus.$emit来触发该事件，并传递数据</span><br></pre></td></tr></table></figure><p>36.路由的懒加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为了避免在webpack打包时，JavaScript变得非常大，影响页面加载，这时可以利用路由懒加载</span><br><span class="line">原理：它是将路由对应的组件打包成一个个js代码块，当该路由被访问的时候才会去加载对应的组件，否则不加载</span><br><span class="line">实现的三种方式：</span><br><span class="line">1.利用箭头函数+import()动态加载</span><br><span class="line">2.利用箭头函数+require()动态加载</span><br><span class="line">3.利用webpack的require.ensure技术</span><br></pre></td></tr></table></figure><p>37.路由的两种工作模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hash模式和history模式</span><br><span class="line">1.hash模式</span><br><span class="line">在url中会有/#，但是hasn值(#及其后面的内容)不会包含在http请求中，也就是不会将这些信息带给服务器</span><br><span class="line">他的地址中一直带着#，但是兼容性好，也是默认的路由模式</span><br><span class="line">2.history模式</span><br><span class="line">url地址干净美观，但是兼容性较差，需要后端人员支持，解决刷新页面服务器端404问题</span><br><span class="line">API：包括forward()、back()、go()三个方法，对应浏览器的前进，后退，跳转操作。</span><br></pre></td></tr></table></figure><p>38.两种工作模式的对比</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.对于history.pushState()修改浏览器的历史记录栈，对比直接修改hasn值，有以下好处</span><br><span class="line">1.pushState可以修改与当前url同源的任意路径，但是hash只能修改#之后的内容，也就是只能设置和当前url同文档的url</span><br><span class="line">2.pushState设置的新的url可以和当前url一致，会把该记录加入到栈中；但是hash必须要求新的url与当前不同才会把记录加入到栈中</span><br><span class="line">2. 在hash模式中，#之前的内容都会放在http请求中，即使后端没有对路由进行全覆盖，也不会返回404的错误</span><br><span class="line">在history模式中，必须要求前端的url和向后端发起请求的url保持一致，后端如果没有对使用的路由处理，会有404的错误</span><br></pre></td></tr></table></figure><ol start="39"><li>$route 和$router的区别</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route是路由实例对象，包含了路由跳转方法，钩子函数（导航守卫）等</span><br><span class="line">$router是路由信息对象，包含了name，path，fullPath，query，params等路由信息参数</span><br></pre></td></tr></table></figure><p>40.常见的http请求方法有哪些？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get:向服务器请求数据</span><br><span class="line">post：携带数据向服务器发起请求，最终会在服务器端创建新的数据（重点是创建新的数据，例如注册用户业务）</span><br><span class="line">put：上传数据，更新服务器的数据（重点是更新数据）</span><br><span class="line">delete：删除服务器上的数据</span><br><span class="line">head：获取报文的首部，与get相比不返回相应实体数据</span><br><span class="line">options：询问服务器支持的请求方法，用来跨域请求</span><br><span class="line">trace：回显服务器收到的请求，用于测试或诊断</span><br></pre></td></tr></table></figure><p>41.get和post请求的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.应用场景：get用于不需要对服务器资源产生影响的场景，仅仅只用来获取数据</span><br><span class="line">        post用于需要对服务器资源产生影响的场景，最终服务器端会产生新的数据（例如用户注册业务）</span><br><span class="line">2.发送的报文格式：get请求报文实体部分为空</span><br><span class="line">             post的请求报文实体部分一般是向服务器发送的数据</span><br><span class="line">3.安全性：get请求的中参数会放在url中向服务器发送过去，这种相对于post来说是不安全的</span><br><span class="line">4.参数类型：post请求中参数传递支持更多的数据</span><br></pre></td></tr></table></figure><p>42.常见的http请求头和响应头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 请求头：</span><br><span class="line">        1. Accept-Charset:浏览器能够显示的字符集</span><br><span class="line">        2. Accept-Encoding：浏览器能够处理的压缩编码</span><br><span class="line">        3. Accept-Language：浏览器当前设置的语言(可接受的字符集，编码，语言)</span><br><span class="line">        4. Host：请求将被发送的目的地（仅包括域名+端口号）</span><br><span class="line">        5. Origin 用来说明请求从哪里发起的（仅包括协议和域名）</span><br><span class="line">2.响应头：</span><br><span class="line">1. Date：表示响应消息发出的时间</span><br><span class="line">2. server：表示服务器的名称</span><br><span class="line">3. Allow：服务器支持那些请求方法</span><br><span class="line">4. Access-Control-Allow-Origin：哪些网站跨域</span><br><span class="line">5. Content-Encoding：响应资源的编码</span><br><span class="line">6. Content-Language:响应资源的语言</span><br></pre></td></tr></table></figure><p>43.http和https协议的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.https是超文本传输安全协议（他是在http的基础上通过加密传输和身份验证来保证传输的安全性），需要CA证书，费用很高，但http不需要</span><br><span class="line">2.http是超文本传输协议，信息是明文传输的，而https是通过SSL加密传输的更安全</span><br><span class="line">3.使用的端口号不同，http默认端口为80，https默认端口为443</span><br><span class="line">4.https通过加密传输和身份验证来保证传输安全，对比http更安全</span><br></pre></td></tr></table></figure><p>44.当用户在浏览器中输入<a href="http://www.google.com会发生什么/">www.google.com会发生什么</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.解析URL，分析所使用的传输协议和请求资源的路径</span><br><span class="line">2.缓存判断，看请求的资源是否在缓存中，如果请求的资源在缓存中且没有失效就直接使用，否则就向服务器发起请求</span><br><span class="line">3.DNS解析，dns服务器将url解析为对应的ip地址</span><br><span class="line">4.获取MAC地址，浏览器得到ip地址后，还需要知道目的主机的mac地址，网络层下发至链路层时使用</span><br><span class="line">5.TCP建立连接（三次握手），通过三次握手保证客户端和服务器都能保证自己发送数据和接收数据的能力，并建建立起连接</span><br><span class="line">6.HTTPS握手，如果https协议，那么还存在一个TLS的四次握手，四次握手之后客户端和服务器通过握手得到的3个随机数进行加密得到密钥，以后双方通过该密钥进行通信</span><br><span class="line">7.返回数据，服务器返回一个html文件作为响应，浏览器接收到响应后，开始页面渲染</span><br><span class="line">8.页面渲染，浏览器根据html构建dom树，最后渲染出整个页面</span><br><span class="line">9.TCP断开连接（四次挥手），四次挥手后，客户端和服务器双方断开连接，结束所有通信</span><br></pre></td></tr></table></figure><p>45.http的请求报文和响应报文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.请求报文</span><br><span class="line">请求行：请求方法，url，http协议版本</span><br><span class="line">请求头：key：value形式</span><br><span class="line">空行</span><br><span class="line">请求体：post，put等请求携带的数据</span><br><span class="line">2.响应报文</span><br><span class="line">响应行：协议版本，状态码，状态码原因短语</span><br><span class="line">响应头：key：value</span><br><span class="line">空行</span><br><span class="line">响应体：服务器响应的数据</span><br></pre></td></tr></table></figure><p>46.三次握手和四次挥手</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.三次握手：客户端和服务器建立TCP连接时，需要三次握手，来保证双方发送和接收数据的能力</span><br><span class="line">客户端向服务器发送syn连接请求报文，</span><br><span class="line">服务器收到请求后向客户端发送syn和ack报文，确认本次连接请求，</span><br><span class="line">客户端接收到确认应答后，进入连接状态，同时也向服务器发送一个ack确认报文，服务器收到该确认后，也进入连接状态，</span><br><span class="line">至此双方的连接建立完成</span><br><span class="line">2.四次挥手：客户端和服务器断开TCP连接时，需要进行四次挥手</span><br><span class="line">客户端向服务器发送fin断开请求报文</span><br><span class="line">服务器收到请求后向客户端发送ack报文，确认本次断开连接请求（但是TCP是全双工，也就是说此时服务器又可能还有数据要传给客户端）</span><br><span class="line">所以双方想要断开连接，服务器还需再一次向客户端发送一个fin断开连接请求报文，</span><br><span class="line">客户端收到报文后，向服务器发送ack确认报文，自己进入超时等待</span><br><span class="line">服务端收到ack报文后，就立即关闭连接，之后客户端继续等待超时时间，若是中间没有来自服务器的数据，此时客户端也关闭连接，否则重置超时时间</span><br></pre></td></tr></table></figure><p>47.针对于https中的四次握手（利用中间的三次随机数加密形成密钥进行通信）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四次握手：客户端向服务器发起请求，包括一个随机数和加密方法</span><br><span class="line">服务器收到请求后，给出服务器证书，确认加密方法，并生成一个随机数这些都再次传给客户端</span><br><span class="line">客户端收到后，确认证书有效，并生成一个随机数，利用证书来加密该随机数并发送给服务器</span><br><span class="line">服务器收到后，解密该随机数</span><br><span class="line">此时双方已经三个随机数了，之后双方通过约定的加密方法对三个随机数进行加密，形成密钥进行通信</span><br></pre></td></tr></table></figure><p>48.http状态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2xx 成功状态码，表示请求正常处理完毕</span><br><span class="line"> 200：ok，表示客户端的请求已经被服务器正常处理了</span><br><span class="line">3xx 重定向，表示需要附加操作完成请求</span><br><span class="line"> 301：永久重定向，表示请求的资源已经被分配到了新的uri</span><br><span class="line"> 302：临时重定向，表示请求的资源被临时分配到新的uri，希望用户使用新的uri访问资源</span><br><span class="line">4xx 客户端错误，服务器无法处理请求</span><br><span class="line"> 400：表示报文存在语法错误</span><br><span class="line"> 403：表示访问资源的请求被服务器拒绝了</span><br><span class="line"> 404：服务器无法找到请求的资源</span><br><span class="line">5xx 服务器错误，服务器处理请求出错</span><br><span class="line"> 500：表示服务端在处理请求时发生错误</span><br><span class="line"> 503：表示服务器暂时处于超负载或停机维护，无法处理请求</span><br></pre></td></tr></table></figure><p>49.网络模型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.OSI七层</span><br><span class="line">应用层-表示层-会话层-运输层-网络层-链路层-物理层</span><br><span class="line">2.TCP/IP五层</span><br><span class="line">应用层-传输层-网络层-链路层-物理层</span><br><span class="line">应用层：如 HTTP协议，https协议、FTP协议（文件传输）、SMTP协议（电子邮件）、DNS（域名查询）</span><br><span class="line">传输层：UDP和TCP</span><br><span class="line">网络层：选择合适的路由将数据传递给目的主机</span><br><span class="line">数据链路层：将网络层传递下来的ip数据报封装成帧，在链路传送帧</span><br><span class="line">物理层：物理介质的传输</span><br></pre></td></tr></table></figure><p>50.TCP和UDP的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tcp和udp都时传输层的协议，都属于tcp/ip协议族</span><br><span class="line">tcp提供的是面向连接的，可靠的数据传输服务，数据传输的单位是报文段，适用于精确传输，例如文件传输</span><br><span class="line">udp提供的是无连接的，尽最大努力的数据传输服务，但不保证数据的可靠性，数据传输的单位是用户数据报，适用于要求精确度较低的场景，例如视频聊天，即时通话</span><br></pre></td></tr></table></figure><p>51.TCP的拥塞控制机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tcp的拥塞控制主要通过慢开始，拥塞避免，快速重传，快速恢复四个机制</span><br><span class="line">1.首先是慢开始，设定拥塞窗口=1，最后逐渐增加拥塞窗口的大小，设定一个慢开始门限(当拥塞窗口达到这个门限后，就不会执行慢开始了，而是进入拥塞避免阶段)</span><br><span class="line">2.当拥塞窗口&gt;慢开始门限，进入拥塞避免阶段，此阶段拥塞窗口线性增长，每次自增1，当发送方判断网络出现了拥塞后，将慢开始门限调整为本次出现拥塞窗口的一半，将这时的拥塞窗口重置为1，重新开始慢开始算法</span><br><span class="line">3.快重传，当接收方收到一个失序的报文段时就立即发出重复确认，发送到只要连续收到三个重复确认就袭击重传对方缺失的报文段</span><br><span class="line">4.快恢复，当发送放执行了快重传后，会将慢开始门限和下一次的拥塞窗口调整为本次拥塞窗口的一半，这时直接进入拥塞避免阶段</span><br></pre></td></tr></table></figure><p>面试【高频的面试】:项目的性能优化手段有哪些？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-if|v-show:尽可能采用v-show</span><br><span class="line">按需引入【lodash、elementUI】</span><br><span class="line">防抖与节流</span><br><span class="line">路由懒加载：当用户访问的时候，加载对应组件进行展示。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试图片加名称</title>
      <link href="/2022/06/15/test2/"/>
      <url>/2022/06/15/test2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img2.baidu.com/it/u=1820426694,3444617145&fm=253&fmt=auto&app=138&f=JPEG?w=456&h=500" alt="小黑柴"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js测试</title>
      <link href="/2022/06/14/test/"/>
      <url>/2022/06/14/test/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟获取  用户数据  订单数据  商品数据 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;用户数据&#x27;</span>;<span class="keyword">let</span> data1 = <span class="string">&#x27;用户数据&#x27;</span>;<span class="keyword">let</span> data2 = <span class="string">&#x27;用户数据&#x27;</span>;<span class="keyword">let</span> data3 = <span class="string">&#x27;用户数据&#x27;</span>;<span class="keyword">let</span> data4 = <span class="string">&#x27;用户数据&#x27;</span>;<span class="keyword">let</span> data5 = <span class="string">&#x27;用户数据&#x27;</span>;<span class="keyword">let</span> data7 = <span class="string">&#x27;用户数据&#x27;</span>;</span><br><span class="line">        <span class="comment">//调用 next 方法, 并且将数据传入</span></span><br><span class="line">        iterator.<span class="title function_">next</span>(data);<span class="comment">//这里开始第二次next，并将这个实参data传递给上一个yield返回值</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrders</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(data);<span class="comment">//第三次next</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGoods</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(data);<span class="comment">//第四次next</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">yield</span> <span class="title function_">getUsers</span>();<span class="comment">//第一次调用next结束，同时执行getUsers()函数</span></span><br><span class="line">    <span class="comment">//函数中第二次调用了next，并传入了实参，这时的实参将返回给上一次yield</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span><br><span class="line">    <span class="keyword">let</span> orders = <span class="keyword">yield</span> <span class="title function_">getOrders</span>();<span class="comment">//第二次next结束</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(orders);</span><br><span class="line">    <span class="keyword">let</span> goods = <span class="keyword">yield</span> <span class="title function_">getGoods</span>();<span class="comment">//第三次next结束</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(goods);</span><br><span class="line">    <span class="comment">//第四次next结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
